{"version":3,"sources":["components/rates.js","components/reply.js","components/replyform.js","components/li.js","components/main.js","components/ul.js","App.js","root.js","serviceWorker.js","index.js"],"names":["Main","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","rate","react_default","a","createElement","className","style","clear","Component","deleteReply","row","review_reply_num","idx","review_num","deleteBtnStyle","member_num","display","bind","assertThisInitialized","member_pic","float","src","alt","id","review_reply_comment","onClick","simpletime","ReplyForm","getMemberData","url","axios","get","then","res","setState","mbdto","data","catch","err","console","error","inputChange","e","target","value","length","buttonStyle","border","color","fontWeight","paddingLeft","fontSize","marginTop","key","insertReply","preventDefault","objectSpread","refs","showReplyList","hideWriteForm","scrollToLastReply","goLoginPage","log","list","review_reply_writeday","user_pic","placeholder","href","onSubmit","type","ref","onChange","Li","clickHeart","updateLike","show","hide","alreadyLiked","unclickHeart","updateUnlike","openDetailDiv","rateDetailStyle","position","top","backgroundColor","zIndex","toggleReplyList","showOrHide","replyListStyle","changeShowOrHide","closeAllReplyList","lastPositionConsolelog","document","getElementById","offsetTop","showWriteForm","writeformStyle","windowScroll","deleteData","showHeart","touchtime","Date","getTime","heartStyle","opacity","animation","animationTimingFunction","setTimeout","moreBtnStyle","listStyle","lastReplyPosition","_this2","review_img","startReplyPositionId","lastReplyPositionId","totalRate","review_clean","review_dining","review_location","review_service","Math","round","showOrHideText","review_reply_count","querySelectorAll","forEach","anchor","addEventListener","querySelector","getAttribute","scrollIntoView","behavior","rates_Main","review_price","replyform_ReplyForm","review_like","review_comment","reply_list","map","reply_Main","_ref","match","params","App","react_router","path","component","Root","store","es","basename","process","react_router_dom","src_App","Boolean","window","location","hostname","ReactDOM","render","root","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.20fd978f.chunk.js","sourcesContent":["import React, {Component} from 'react'\n\n\nexport default class Main extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            //state 초기화 \n        }\n    }\n\n\n\n    //render함수 \n    render(){\n        let rate = this.props.rate;\n\n        if(rate == 0){\n            return(\n                <div>\n                    <i className='far fa-star'></i>\n                    <i className='far fa-star'></i>\n                    <i className='far fa-star'></i>\n                    <i className='far fa-star'></i>\n                    <i className='far fa-star'></i>\n                    <div style={{clear:'both'}}></div>\n                </div>\n            )\n        }else if(rate == 1){\n            return(\n                <div>\n                    <i className='fas fa-star'></i>\n                    <i className='far fa-star'></i>\n                    <i className='far fa-star'></i>\n                    <i className='far fa-star'></i>\n                    <i className='far fa-star'></i>\n                    <div style={{clear:'both'}}></div>\n                </div>\n            )\n        }else if(rate == 2){\n            return(\n                <div>\n                    <i className='fas fa-star'></i>\n                    <i className='fas fa-star'></i>\n                    <i className='far fa-star'></i>\n                    <i className='far fa-star'></i>\n                    <i className='far fa-star'></i>\n                    <div style={{clear:'both'}}></div>\n                </div>\n            )\n        }else if(rate == 3){\n            return(\n                <div>\n                    <i className='fas fa-star'></i>\n                    <i className='fas fa-star'></i>\n                    <i className='fas fa-star'></i>\n                    <i className='far fa-star'></i>\n                    <i className='far fa-star'></i>\n                    <div style={{clear:'both'}}></div>\n                </div>\n            )\n        }else if(rate == 4){\n            return(\n                <div>\n                    <i className='fas fa-star'></i>\n                    <i className='fas fa-star'></i>\n                    <i className='fas fa-star'></i>\n                    <i className='fas fa-star'></i>\n                    <i className='far fa-star'></i>\n                    <div style={{clear:'both'}}></div>\n                </div>\n            )\n        }else{\n            return(\n                <div>\n                    <i className='fas fa-star'></i>\n                    <i className='fas fa-star'></i>\n                    <i className='fas fa-star'></i>\n                    <i className='fas fa-star'></i>\n                    <i className='fas fa-star'></i>\n                    <div style={{clear:'both'}}></div>\n                </div>\n            )\n        }\n\n\n    }\n\n}","import React, {Component} from 'react'\n\n\nexport default class Main extends Component{\n\n    constructor(props){\n        super(props);\n\n        let deleteBtnStyle = \"\";\n        //해당 댓글이 로그인한 회원의 댓글일 경우 삭제 버튼이 보여야 한다 \n        if(this.props.member_num == this.props.row.member_num){\n            deleteBtnStyle = 'inline';\n        }else{\n            deleteBtnStyle = 'none';\n        }\n\n        this.state = {\n            //state 초기화 \n            deleteBtnStyle : {\n                display : deleteBtnStyle,\n            }\n        }\n\n        this.deleteReply = this.deleteReply.bind(this);\n      \n    }\n\n    deleteReply = () => {\n        this.props.deleteReply(this.props.row.review_reply_num, this.props.idx, this.props.review_num);\n    }\n\n\n    //render함수 \n    render(){\n        let member_pic = \"http://15.164.144.128:8080/HotelProject/save/member_pic/\" + this.props.row.member_pic;\n        return(\n            <div>\n                 <div className=\"review_reply_list_div\">\n                    <div style={{float:'left'}}><img className=\"img-circle\" src={member_pic} alt=\"member_pic\"></img></div>\n                    <div className=\"reply_comments\">\n                        <b>{this.props.row.id}</b> {this.props.row.review_reply_comment}\n                        {/* 댓글 삭제 아이콘 */}\n                        <span style={this.state.deleteBtnStyle} className=\"replyDeleteBtn\" onClick={this.deleteReply}>\n                            <i className=\"fas fa-times\"></i>\n                        </span>\n                        <div style={{clear:'both'}} className=\"reply_writeday_div\">{this.props.row.simpletime}</div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n}","import React, {Component} from 'react';\nimport axios from 'axios';\n\n\nexport default class ReplyForm extends Component{\n\n    constructor(props){\n        super(props);\n\n        //스테이트 초기화\n        this.state = {\n            member_num : this.props.member_num,//여기 this로 변경해봤는데 에러가 나는지 재확인 \n            review_num : this.props.review_num,\n\n            mbdto : {\n                review_reply_num : null,\n                review_num : null,\n                member_num : props.member_num,\n                review_reply_writeday: null,\n                review_reply_comment : ''\n            },\n            buttonStyle : {\n                border: 0,\n                color: 'lightskyblue',\n                paddingLeft: '10px',\n                fontSize: '1em',\n                marginTop: '-3px',\n            }\n        }\n\n     \n\n        //메서드 바인딩 \n        this.getMemberData = this.getMemberData.bind(this);\n        this.insertReply = this.insertReply.bind(this);\n\n        if(this.state.member_num!==0){\n            this.getMemberData(this.state.member_num);\n        }\n\n    }\n\n    //서버로부터 db데이타를 받아옴 \n    getMemberData = (member_num) => {\n        var url=\"http://15.164.144.128:8080/HotelProject/reviewGetMember?member_num=\" + member_num;\n\n        axios.get(url)\n        .then(res => {\n            this.setState({\n                mbdto : res.data\n            })\n        })\n        .catch(err => {\n            console.error(err); \n        })\n\n    }\n\n    //댓글 창에 값이 써짐에 따라 달라지는 버튼 style \n    inputChange = (e) => {\n        if(e.target.value.length !== 0){ //버튼 활성화 상태 \n            this.setState({\n                buttonStyle : {\n                    border: 0,\n                    color: 'deepskyblue',\n                    fontWeight: 'bold',\n                    paddingLeft: '10px',\n                    fontSize: '1em',\n                    marginTop: '-3px',\n                }\n            })\n        }else{ //버튼 비활성화 상태 \n            this.setState({\n                buttonStyle : {\n                    border: 0,\n                    color: 'lightskyblue',\n                    paddingLeft: '10px',\n                    fontSize: '1em',\n                    marginTop: '-3px',\n                }\n            })\n        }\n\n        if(e.key == 'Enter'){\n            this.insertReply();\n        }\n    }\n\n    //댓글 인서트 메서드\n    insertReply = (e) => {\n        e.preventDefault();\n        this.props.insertReply({...this.refs}, this.props.idx);\n        this.props.showReplyList();\n\n        //댓글 창 내용은 비우고 \n        this.refs.review_reply_comment.value = '';\n        //버튼의 스타일도 비활성화 상태로 바꿈 \n        this.setState({\n            buttonStyle : {\n                border: 0,\n                color: 'lightskyblue',\n                paddingLeft: '10px',\n                fontSize: '1em',\n                marginTop: '-3px',\n            }\n        })\n\n        //부모(li.js)에서 관리하는 writeformStyle의 display를 none으로 변경시켜야 한다.\n        this.props.hideWriteForm();\n\n        //스크롤 위치를 최신 댓글 위치로 변경 시켜봅시다.(부모가 가진 함수에요)\n        this.props.scrollToLastReply();\n        \n    }\n\n    goLoginPage = () => {\n        console.log('goLoginPage');\n        var url=\"http://15.164.144.128:8080/HotelProject/reactLogin\";\n\n        axios.get(url)\n        .then(res => {\n            this.setState({\n                list : res.data\n            })\n        })\n        .catch(err => {\n            console.error(err); \n        })\n\n\n\n    }\n    \n\n    render(){\n\n        let user_pic = \"http://15.164.144.128:8080/HotelProject/save/member_pic/\" + this.state.mbdto.member_pic;\n        let placeholder = this.state.mbdto.id + \"님으로 댓글 달기...\";\n\n        if(this.props.member_num == 0){\n            return(\n                <div className=\"writeform_div\">\n                    <a href=\"http://15.164.144.128:8080/HotelProject/reactLogin.do?url=reviewlist.do\">\n                        <div className=\"writeform_nologin\" >\n                        댓글을 작성하시려면 먼저 <span>로그인</span>을 해주세요.\n                        {/* 로그인 창으로 유도 및 url 값 넘겨주기!!  */}\n                        </div>\n                    </a>\n                </div>\n            )\n        }else{\n            return(\n                <div className=\"review_reply_list_div writeform_div\">\n                    <div style={{float:'left'}}><img className=\"img-circle\" src={user_pic} alt=\"member_pic\"></img></div>\n                    <div className=\"reply_comments\">\n                        <form onSubmit={this.insertReply}>\n                        <input type=\"hidden\" ref=\"member_num\" value={this.state.member_num}></input>\n                        <input type=\"hidden\" ref=\"review_num\" value={this.state.review_num}></input>\n                        \n                        <input type=\"text\" ref=\"review_reply_comment\" placeholder={placeholder} onChange={this.inputChange} \n                        // autoFocus={this.props.autoFocus.autoFocus}\n                        ></input>\n                        <button type=\"submit\" style={this.state.buttonStyle} className=\"btn btn-xs btn-default\" id=\"reply_submit\">게시</button>\n                        </form>\n                    </div>\n                    <div style={{clear:'both'}}></div>\n                </div>\n            )\n        }\n        \n    }\n}","import React, {Component} from 'react';\nimport Rates from './rates';\nimport Reply from './reply';\nimport ReplyForm from './replyform';\nimport { NONAME } from 'dns';\n\nexport default class Li extends Component{\n\n    constructor(props){\n        super(props);\n\n        //글 삭제 버튼이 보이기 위한 조건 : 현재 로그인 한 회원과 게시물을 작성한 회원이 일치 할 때 \n        let moreBtnStyle = \"\";\n        if(this.props.member_num == this.props.row.member_num){\n            moreBtnStyle = 'inline';\n        }else{\n            moreBtnStyle = 'none';\n        }\n        \n\n        this.state = {\n            show : {\n                display: 'inline'\n            },\n            hide : {\n                display: 'none'\n            },\n            rateDetailStyle :{\n                display : 'none',\n            },\n            replyListStyle : {\n                display : this.props.listStyle.display\n            },\n            // showOrHide : this.props.showText,\n            showOrHide : \"모두 보기\",\n            writeformStyle : {\n                display : 'none',              \n            },\n            lastReplyPosition : 0,\n            member_num : props.member_num,\n            moreBtnStyle : {\n                display: moreBtnStyle,\n            },\n            touchtime : 0,\n            heartStyle : {\n                opacity: 0,\n            },\n            alreadyLiked : 'no',\n\n\n        };\n\n        this.clickHeart = this.clickHeart.bind(this);\n        this.unclickHeart = this.unclickHeart.bind(this);\n        this.openDetailDiv = this.openDetailDiv.bind(this);\n        this.toggleReplyList = this.toggleReplyList.bind(this);\n        this.changeShowOrHide = this.changeShowOrHide.bind(this);\n        this.showWriteForm = this.showWriteForm.bind(this);\n        this.hideWriteForm = this.hideWriteForm.bind(this);\n        this.scrollToLastReply = this.scrollToLastReply.bind(this);\n        this.lastPositionConsolelog = this.lastPositionConsolelog.bind(this);\n        this.hideWriteForm = this.hideWriteForm.bind(this);\n        this.closeAllReplyList = this.closeAllReplyList.bind(this);\n        this.scrollToLastReply = this.scrollToLastReply.bind(this);\n        this.deleteData = this.deleteData.bind(this);\n        this.showHeart = this.showHeart.bind(this);\n        \n    }\n\n\n    //functions for li component\n\n    //when to click empty heart button\n    clickHeart = () => {\n\n        //update like \n        this.props.updateLike(this.props.idx, this.props.row.review_num);\n\n        this.setState({\n            show : {\n                display : 'none'\n            },\n            hide : {\n                display : 'inline'\n            },\n            alreadyLiked : 'yes',\n        })\n    }\n\n    //when to cancel clicked heart \n    unclickHeart = () => {\n\n        //update unlike\n        this.props.updateUnlike(this.props.idx, this.props.row.review_num);\n \n        this.setState({\n            show : {\n                display : 'inline'\n            },\n            hide : {\n                display : 'none'\n            },\n            alreadyLiked : 'no',\n            \n        })\n    }\n\n    //when to click rating div : show detail of ratings \n    openDetailDiv = () => {\n        if(this.state.rateDetailStyle.display == 'none'){\n            this.setState({\n                rateDetailStyle : {\n                    display : 'block',  \n                    position: 'absolute',\n                    top: '30px',\n                    backgroundColor : 'white',\n                    zIndex: 10\n                }\n            })\n        }else{\n            this.setState({\n                rateDetailStyle : {\n                    display : 'none',  \n                }\n            })\n        }\n        \n    }\n\n    //댓글 리스트를 열고 닫아주는 함수 \n    toggleReplyList = () => {\n\n        //아래 함수가 호출되면 댓글 토글 시 남의 댓글은 자동으로 닫힌다.\n        // this.closeAllReplyList(this.props.idx);\n        \n        if(this.state.showOrHide == \"모두 보기\"){\n            this.setState({\n                replyListStyle : {\n                    display : 'block'\n                }\n            });\n       \n        }else{\n            this.setState({\n                replyListStyle : {\n                    display : 'none'\n                }\n            });\n        }\n\n            //  //시작위치 잡을 id \n            // let startReplyPositionId = \"startReplyPosition\" + this.props.row.review_num;\n            // console.log(\"check id \", startReplyPositionId);\n\n            // //시작위치 \n            // let startReplyPosition = document.getElementById(startReplyPositionId).offsetTop;\n\n            // //댓글 시작 위치 확인용\n            // console.log(\"start reply list position : \" , startReplyPosition);\n\n            // //거기로 옮깁니다.\n            // window.scroll({\n            // top: startReplyPosition,\n            // left: 0,\n            // behavior: 'smooth'\n            // });\n\n        //스크롤을 해당 글의 댓글 리스트 최상단으로 옮겨주기\n        // this.props.moveToReplyListStart(this.props.idx, this.props.windowScroll);\n        \n        //모두 보기 <-> 모두 닫기 문구 변경 \n        this.changeShowOrHide();\n\n        //만약 댓글 작성창이 기존에 열려있었다면 닫아줘야 한다.\n        this.hideWriteForm();\n\n    }\n\n    \n    //모든 댓글 리스트를 닫는 함수\n    closeAllReplyList = (idx) => {\n        //호출하는 자식의 인덱스를 부모에게 보냄 \n        this.props.closeAllReplyList(idx);\n        \n    }\n\n    //마지막 댓글위치를 출력하는 함수 \n    lastPositionConsolelog = () => {      \n        console.log(\"last reply position \" , document.getElementById(\"lastReplyPosition\").offsetTop);\n    }\n\n    \n    //댓글 리스트를 보여주는 함수 \n    showReplyList = () => {\n        this.closeAllReplyList(this.props.idx);\n        this.setState({\n                    replyListStyle : {\n                        display : 'block'\n                    }\n                });\n        \n    }\n\n\n    //모두 보기 모두 닫기 토글 함수 \n    changeShowOrHide = () => {\n        if(this.state.showOrHide == \"모두 보기\"){\n            this.setState({\n                showOrHide : \"모두 닫기\"\n            })\n        }else if(this.state.showOrHide == \"모두 닫기\"){\n            this.setState({\n                showOrHide : \"모두 보기\"\n            })\n        }\n    }\n\n\n    //댓글 작성창을 보이게 하는 함수\n    showWriteForm = () => {\n        this.setState({\n            writeformStyle : {\n                display: 'block',\n                zIndex : 10,\n            },\n            // autoFocus : {\n            //     autoFocus : 'true'\n            // } //이거 왜 안될까.... 슬프다..\n        })\n\n        this.showReplyList();\n\n    }\n\n    //댓글 작성창을 숨기게 하는 함수\n    hideWriteForm = () => {\n        this.setState({\n            writeformStyle : {\n                display : 'none',\n            }\n        })\n    }\n\n    //최신댓글 위치로 스크롤을 이동시키는 함수 \n    //혹시 이걸 부모로 옮겨야 하나...?\n    scrollToLastReply = () => {\n        this.props.scrollToLastReply(this.props.idx, this.props.windowScroll);\n    }\n\n    // //자식(reply)로 부터 lastReplyPosition의 값을 받는 함수\n    // getLastReplyPosition = (e) => {\n    //     this.setState({\n    //         lastReplyPosition : \n    //     })\n    // }\n\n    //게시물을 삭제하는 함수 \n    deleteData = (review_num) => {\n        this.props.deleteData(this.props.row.review_num);\n    }\n\n    //이미지 더블클릭 시 하트가 나타났다가 사라지게\n    showHeart = () => {\n        \n        if (this.state.touchtime == 0) {\n            // set first click\n            this.setState({\n                touchtime : new Date().getTime(),\n            })\n        } else {\n            // compare first click to this click and see if they occurred within double click threshold\n            if (((new Date().getTime()) - this.state.touchtime) < 800) {\n                // double click occurred\n\n                //하트 보이게 \n                this.setState({\n                    heartStyle : {\n                        opacity: 1,\n                        animation : 'showHeart 2s',\n                        animationTimingFunction: 'ease',\n                    },\n                    touchtime : 0,\n                })\n\n                //0.9초 뒤에 다시 사라지도록 \n                setTimeout(\n                    function() {\n                        this.setState({\n                            heartStyle : {\n                                opacity: 0,\n                            }\n                        })\n                    }\n                    .bind(this),\n                    1900\n                );\n\n                //좋아요 버튼 누른 효과\n                if(this.state.alreadyLiked!='yes'){\n                    this.clickHeart();\n                }\n\n            } else {\n                // not a double click so set as a new first click\n                this.setState({\n                    touchtime : new Date().getTime(),\n                })\n            }\n        }\n    }\n    \n\n    //render함수 \n    render(){\n\n        //복잡한 스트링 처리는 미리 해주도록 합니다.\n        let review_img = \"http://15.164.144.128:8080/HotelProject/save/review/\" + this.props.row.review_img;\n        let member_pic = \"http://15.164.144.128:8080/HotelProject/save/member_pic/\" + this.props.row.member_pic;\n        let heart = \"http://15.164.144.128:8080/HotelProject/save/images/heart.png\";\n\n        let startReplyPositionId = \"startReplyPosition\" + this.props.idx;\n        // let replyListId = \"replyList\" + this.props.row.review_num;\n\n        let lastReplyPositionId = \"lastReplyPosition\" + this.props.idx;\n        \n        //별점 총점 계산 \n        let totalRate = (this.props.row.review_clean + this.props.row.review_dining + this.props.row.review_location + this.props.row.review_service + this.props.row.review_service)/5;\n        totalRate = Math.round(totalRate);\n\n        // '모두 보기' '모두 닫기' \n        let showOrHideText = '';\n\n        // 댓글이 없을 경우 아무 문구도 띄우지 않습니다.\n        if(this.props.row.review_reply_count == 0){\n            showOrHideText = '';\n        }else{\n            showOrHideText = this.state.showOrHide;\n        }\n\n        //스크롤 천천히 내리게 하기 위한 작업..\n        document.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\n            anchor.addEventListener('click', function (e) {\n                e.preventDefault();\n        \n                document.querySelector(this.getAttribute('href')).scrollIntoView({\n                    behavior: 'smooth'\n                });\n            });\n        });\n\n        return(\n            <div>\n                <li>\n                    <div className=\"review_div\">\n                        \n                        {/* 작성자 프로필, 아이디 출력 */}\n                        <div className=\"review_member_div\">\n                            <img className=\"\" src={member_pic} alt=\"member_pic\"></img>\n                            <b>{this.props.row.id}</b>\n                        </div>\n\n                        {/* 별점 총점 이 출력(상세별점은 숨겨져 있음) */}\n                        <div className=\"review_rating_div\" onClick={this.openDetailDiv}>\n                                     <Rates rate={totalRate}></Rates>\n                                <div style={{clear:'both'}}></div>\n                                \n                                {/* 상세 별점 */}\n                                <div className=\"review_rating_details_div\" style={this.state.rateDetailStyle}>\n                                    <i className=\"fas fa-broom\" ></i> <Rates  rate={this.props.row.review_clean}></Rates>\n                                    <div style={{clear:'both'}}></div>\n                                    <i className=\"fas fa-utensils\"></i><Rates rate={this.props.row.review_dining}></Rates>\n                                    <div style={{clear:'both'}}></div>\n                                    <i className=\"fas fa-map-marker-alt\"></i><Rates rate={this.props.row.review_location}></Rates>\n\n                                    <i className=\"fas fa-smile\"></i> <Rates rate={this.props.row.review_service}></Rates>\n                                    <i className=\"fas fa-dollar-sign\"></i><Rates rate={this.props.row.review_price}></Rates>\n                                </div>\n                        </div>\n\n\n                        \n                        <div className=\"review_below\">\n                        \n                            {/* 사진 나오는곳  */}\n                            <div className=\"review_pics_div\" >\n                                <img src={review_img} alt=\"review_pic\" ></img>\n                                <div style={this.state.heartStyle} className=\"imgHeart\" onClick={this.showHeart}><img src={heart} alt=\"heart\"></img></div>\n                            </div>\n\n\n                            {/* 좋아요버튼, 댓글쓰기 버튼  */}\n                            <div className=\"review_func_div\">\n                                {/* 좋아요 버튼 - 비어있는 하트  */}\n                                <span ref=\"emptyHeart\" style={this.state.show} >\n                                    <i className=\"far fa-heart\" onClick={this.clickHeart}></i>\n                                </span>\n                                {/* 좋아요 버튼 - 채워져있는 하트 */}\n                                <span ref=\"filledHeart\" style={this.state.hide} >\n                                    <i className=\"fas fa-heart\" style={{color:'orangered'}} onClick={this.unclickHeart}></i>\n                                </span>\n                                {/* 댓글쓰기 버튼 */}\n                                <span><i className=\"far fa-comment\" onClick={this.showWriteForm}></i></span>\n                                {/* 수정, 삭제 버튼 */}\n                                <span style={this.state.moreBtnStyle} className=\"review_func_more\" onClick={this.deleteData} ><i className=\"fas fa-times\"></i></span>\n                                <div style={{clear: 'both'}}></div>\n                            </div>\n\n\n                            {/* 댓글 작성 창 */}\n                            <div className=\"review_reply_writeform_div\" style={this.state.writeformStyle}>\n                                        <ReplyForm member_num={this.props.member_num}\n                                        review_num={this.props.row.review_num}\n                                        insertReply={this.props.insertReply}\n                                        idx = {this.props.idx} \n                                        showReplyList={this.showReplyList}\n                                        //    autoFocus = {this.state.autoFocus}\n                                        hideWriteForm = {this.hideWriteForm}\n                                        scrollToLastReply = {this.scrollToLastReply}\n                                        ></ReplyForm>   \n                            </div>\n\n\n                            {/* 좋아요 갯수 출력 */}\n                            <div className=\"review_like_div\">\n                                <b>좋아요 {this.props.row.review_like} 개 </b>\n                            </div>\n\n                            {/* 내용 출력  */}\n                            <div className=\"review_content_div\">\n                                <b>{this.props.row.id}</b> {this.props.row.review_comment}\n                            </div>\n\n                             {/* 작성 시간 출력  */}\n                             <div className=\"review_writeday_div\">\n                                {this.props.row.simpletime}\n                            </div>\n\n                            {/* 댓글 출력  */}\n                            <div className=\"review_reply_div div_last\" id={startReplyPositionId}>\n                                {/* <a href={\"#\"+startReplyPositionId}>test!!!</a> */}\n                                {/* <div onClick={this.toggleReplyList}>\n                                    <span>댓글 {this.props.row.review_reply_count} 개 {showOrHideText}</span>\n                                </div> */}\n                                <div >\n                                    <a className=\"a_reply\" href={\"#\"+startReplyPositionId} onClick={this.toggleReplyList}>댓글 {this.props.row.review_reply_count} 개 {showOrHideText}</a>\n                                </div>\n\n                                {/* <div style={this.props.listStyle} ref={replyListId}> */}\n                                    <div className=\"review_reply_list_div\" style={this.state.replyListStyle}>\n                                        {\n                                            this.props.row.reply_list.map( (row,idx) => \n                                                (<div key={row.review_reply_num}>\n                                                    <Reply row={row} idx={this.props.idx} \n                                                    review_num={this.props.row.review_num}\n                                                    member_num={this.state.member_num}\n                                                    deleteReply = {this.props.deleteReply}\n                                                    ></Reply>\n                                                <div style={{clear:'both'}}></div></div>)\n                                            )\n                                        }\n                                        \n                                        {/* 댓글 목록 내부에 위치한 댓글 작성창  */}\n                                        <div className=\"review_reply_writeform_div_inList\" >\n                                        <ReplyForm member_num={this.props.member_num}\n                                        review_num={this.props.row.review_num}\n                                        insertReply={this.props.insertReply}\n                                        idx = {this.props.idx} \n                                        showReplyList={this.showReplyList}\n                                        //    autoFocus = {this.state.autoFocus}\n                                        hideWriteForm = {this.hideWriteForm}\n                                        scrollToLastReply = {this.scrollToLastReply}\n                                        ></ReplyForm>   \n                                        </div>\n\n                                    </div>\n                                {/* </div> */}\n                                <div id={lastReplyPositionId}></div>\n                            </div>\n\n                        </div>\n\n                    </div>\n                </li>\n            </div>\n        )\n    }\n\n}\n","import React, {Component} from 'react';\nimport Ul from './ul';\n\n\nconst Main = ({match}) => {\n      return (\n        <p>param: {match.params.member_num}</p>\n        // <Ul member_num={match.params.member_num}></Ul>\n     );\n};\n\nexport default Main;\n\n","import React, {Component} from 'react'\nimport Li from './li'\nimport axios from 'axios'\n\nexport default class Main extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            //state 초기화 \n            list : [], // db 데이타를 저장 (여러개라서 배열로 받아야..)\n            member_num : props.member_num,\n            listStyle : {\n                display : 'none',\n            },\n            showListStyle : {\n                display: 'block',\n            },\n            // showText: \"모두 보기\",\n            // hideText: \"모두 닫기\",\n            callChildIdx : null,\n            currentPage : 1,\n        }\n        this.list = this.list.bind(this);\n        this.updateLike = this.updateLike.bind(this);\n        this.updateUnlike = this.updateUnlike.bind(this);\n        this.insertReply = this.insertReply.bind(this);\n        this.closeAllReplyList = this.closeAllReplyList.bind(this);\n        this.moveToReplyListStart = this.moveToReplyListStart.bind(this);\n        this.windowScroll = this.windowScroll.bind(this);\n        this.scrollToLastReply = this.scrollToLastReply.bind(this);\n        this._infiniteScroll = this._infiniteScroll.bind(this);\n        this.deleteData = this.deleteData.bind(this);\n        this.deleteReply = this.deleteReply.bind(this);\n\n    }\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // DB 관련 함수 시작 \n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    //list 를 가져올 함수\n    list = (currentPage) => {\n\n        var url=\"http://15.164.144.128:8080/HotelProject/reviewList?currentPage=\" + currentPage;\n\n        axios.get(url)\n        .then(res => {\n            if(currentPage===1){\n                this.setState({\n                    list : res.data\n                })\n            }else{\n                if(res.data.length === 0){\n                    this.setState({\n                        currentPage: this.state.currentPage-1,\n                    })\n                }else{\n                    this.setState({\n                        list : this.state.list.concat(res.data),\n                    })\n                }\n               \n            }\n            \n        })\n        .catch(err => {\n            console.error(err); \n        })\n\n    }\n\n    // 무한 스크롤 기능\n    _infiniteScroll = () => {\n        let scrollHeight = Math.max(document.documentElement.scrollHeight, document.body.scrollHeight);\n        let scrollTop = Math.max(document.documentElement.scrollTop, document.body.scrollTop);\n        let clientHeight = document.documentElement.clientHeight;\n\n        if(scrollTop+clientHeight===scrollHeight) {\n            this.setState({\n                currentPage : this.state.currentPage + 1,\n            });\n            this.list(this.state.currentPage);\n        }\n    }\n\n\n    //댓글 인서트 메서드\n    insertReply = (data, idx) => {\n\n        var url = \"http://15.164.144.128:8080/HotelProject/reviewReplyAdd?review_num=\" + data.review_num.value +\"&member_num=\" + data.member_num.value + \"&review_reply_comment=\" + data.review_reply_comment.value;\n\n        axios.get(url)\n        .then(res => {\n            //리스트를 현재 열었던 currentpage만큼 재 리스팅해서 가져와야 한다.? \n            // for(let i = 1 ; i <= this.state.currentPage ; i++){\n            //     this.list(i);\n            // }\n            //위의 방법은 큰 문제가 있다. 왜냐하면 자바스크립트가 비동기 방식이라서 순서대로 for문이 돌아가질 않거던...ㅅㅂ..\n            //해결책1 : 보혜씨네 조 처럼 전체 DB 다 가져오고 갯수를 잘라서 보여주는 방식 -> DB가 커지면 엄청 부담될거 같아서 이 방법은 좀..\n            //해결책2 : 콜백 지옥으로 처리\n            //해결책3 : 부분적으로 댓글리스트만 가져와서 list스테이트의 댓글 리스트만 변경한다면 어떨까? => 잘된다!!!\n            \n            //일단 DB로부터 새로 갱신된 댓글 리스트를 받아온다.\n            let replyList = res.data;\n     \n            //해당 리뷰 글의 reply_list부분만 새로 받아온걸로 교체한다.\n            let changeItem = this.state.list[idx];\n            changeItem.reply_list = replyList;\n\n            //이유는 모르겠는데 리액트에서는 배열 관련 꼭 콘캣으로 처리해야되는 부분이 있는것 같다.. (이래놓고 filter나 map 이런건 또 잘됨.. 미스테리)\n            //그래서 해당 리뷰글 기준으로 전글, 후글을 나눠서 전글,바뀐글,후글 순서대로 콘캣으로 연결해 주려고 한다.\n            let beforeItem = this.state.list.filter( (row, id) => {\n                return id < idx\n            })\n\n            let afterItem = this.state.list.filter( (row, id) => {\n                return id > idx\n            })\n\n            this.setState({\n                list : beforeItem.concat(changeItem).concat(afterItem),\n            })\n            \n            \n        })\n        .catch(err => {\n            console.error(err); \n        })\n\n    }\n\n    //댓글 삭제하는 함수\n    deleteReply = (review_reply_num, idx, review_num) => {\n\n        var url=\"http://15.164.144.128:8080/HotelProject/reviewReplyDelete?review_reply_num=\" + review_reply_num + \"&review_num=\" + review_num;\n\n        axios.get(url)\n        .then(res => {\n            \n             //일단 DB로부터 새로 갱신된 댓글 리스트를 받아온다.\n             let replyList = res.data;\n     \n             //해당 리뷰 글의 reply_list부분만 새로 받아온걸로 교체한다.\n             let changeItem = this.state.list[idx];\n             changeItem.reply_list = replyList;\n \n             //그래서 해당 리뷰글 기준으로 전글, 후글을 나눠서 전글,바뀐글,후글 순서대로 콘캣으로 연결해 주려고 한다.\n             let beforeItem = this.state.list.filter( (row, id) => {\n                 return id < idx\n             })\n \n             let afterItem = this.state.list.filter( (row, id) => {\n                 return id > idx\n             })\n \n             this.setState({\n                 list : beforeItem.concat(changeItem).concat(afterItem),\n             })\n\n        })\n        .catch(err => {\n            console.error(err); \n        })\n\n    }\n\n\n\n    //update like when heart button is clicked\n    updateLike = (idx, review_num) => {\n\n        var url=\"http://15.164.144.128:8080/HotelProject/reviewUpdateLike?review_num=\" + review_num;\n\n        axios.get(url)\n        .then(res => {\n            \n            //일단 DB로부터 새로 갱신된 review_like값을 받아온다.\n            let review_like = res.data;\n     \n            //해당 리뷰 글의 review_like부분만 새로 받아온걸로 교체한다.\n            let changeItem = this.state.list[idx];\n            changeItem.review_like = review_like;\n\n            //그래서 해당 리뷰글 기준으로 전글, 후글을 나눠서 전글,바뀐글,후글 순서대로 콘캣으로 연결해 주려고 한다.\n            let beforeItem = this.state.list.filter( (row, id) => {\n                return id < idx\n            })\n\n            let afterItem = this.state.list.filter( (row, id) => {\n                return id > idx\n            })\n\n            this.setState({\n                list : beforeItem.concat(changeItem).concat(afterItem),\n            })\n\n        })\n        .catch(err => {\n            console.error(err); \n        })\n    }\n\n    updateUnlike = (idx, review_num) => {\n\n        var url=\"http://15.164.144.128:8080/HotelProject/reviewUpdateUnlike?review_num=\" + review_num;\n\n        axios.get(url)\n        .then(res => {\n            //일단 DB로부터 새로 갱신된 review_like값을 받아온다.\n            let review_like = res.data;\n     \n            //해당 리뷰 글의 review_like부분만 새로 받아온걸로 교체한다.\n            let changeItem = this.state.list[idx];\n            changeItem.review_like = review_like;\n\n            //그래서 해당 리뷰글 기준으로 전글, 후글을 나눠서 전글,바뀐글,후글 순서대로 콘캣으로 연결해 주려고 한다.\n            let beforeItem = this.state.list.filter( (row, id) => {\n                return id < idx\n            })\n\n            let afterItem = this.state.list.filter( (row, id) => {\n                return id > idx\n            })\n\n            this.setState({\n                list : beforeItem.concat(changeItem).concat(afterItem),\n            })\n\n        })\n        .catch(err => {\n            console.error(err); \n        })\n    };\n\n\n    //게시물 삭제하는 함수 \n    deleteData = (review_num) => {\n\n        var url=\"http://15.164.144.128:8080/HotelProject/reviewDelete?review_num=\" + review_num;\n\n        axios.delete(url)\n        .then(res => {\n            for(let i = 1 ; i <= this.state.currentPage ; i++){\n                this.list(i);\n            }\n        })\n        .catch(err => {\n            console.error(err); \n        })\n    }\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //DB 관련 함수 끝\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n    //모든 댓글리스트를 닫는 함수\n    closeAllReplyList = (idx) => {\n        //인자로 받은 idx가 누구인지 받아서 state에 저장한다.\n        this.setState({\n            callChildIdx : idx,\n        })\n   \n    }\n\n    //댓글보기 버튼을 눌렀을때 스크롤 위치를 댓글 최 상단으로 옮겨주는 함수\n    moveToReplyListStart = (idx, callback) => {\n            // //시작위치 \n            let accHeight = 0;\n\n            for(let i=0 ; i<idx ; i++){\n                accHeight += document.getElementById(\"startReplyPosition\"+idx).offsetTop;\n                accHeight += 100;\n            }\n\n            let startReplyPosition = document.getElementById(\"startReplyPosition\"+idx).offsetTop;\n            //그냥 아이디 기준으로 보내보자...\n            //좌표 찍지 말고\n            \n            startReplyPosition += accHeight;\n\n            // //댓글 시작 위치 확인용\n            console.log(\"id : \" , (\"startReplyPosition\"+idx) ,\"|| acc Height : \" , startReplyPosition);\n\n            // //거기로 옮깁니다.\n            // window.scroll({\n            // top: startReplyPosition,\n            // left: 0,\n            // behavior: 'smooth'\n            // });\n\n            //위 기능을 콜백으로 처리해보자\n            callback(startReplyPosition);\n\n    }\n\n    windowScroll = (startReplyPosition) =>{\n        window.scroll({\n            top: startReplyPosition,\n            left: 0,\n            behavior: 'smooth'\n            });\n    }\n\n    //댓글 작성하기 submit 했을때 최신 댓글 위치가 화면의 맨 하단으로 가게 이동시키는 함수 \n    scrollToLastReply = (idx, callback) => {\n\n        let accHeight = 0;\n\n        for(let i=0 ; i<idx ; i++){\n            accHeight += document.getElementById(\"lastReplyPosition\"+idx).offsetTop + 20;\n        }\n        console.log(\"accHeight\" , accHeight);\n\n        let lastReplyPosition = document.getElementById(\"lastReplyPosition\"+idx).offsetTop;\n        let clientHeight = document.documentElement.clientHeight;\n\n        lastReplyPosition += accHeight - clientHeight;\n\n        // //댓글 마지막 위치 확인용\n        console.log(\"id : \" , (\"lastReplyPosition\"+idx) ,\"|| acc Height : \" , lastReplyPosition);\n\n        //위 기능을 콜백으로 처리해보자\n        callback(lastReplyPosition);\n    }\n\n\n     componentWillMount(){\n        for(let i = 1 ; i <= this.state.currentPage ; i++){\n            this.list(i);\n        }\n        window.addEventListener('scroll', this._infiniteScroll, true);\n\n    }\n\n    \n\n\n    //render함수 \n    render(){\n        return(\n            <div>\n                <ul>\n                    {\n                        this.state.list.map( (row,idx) => {\n\n                            if(idx===this.state.callChildIdx){ //만약 idx 가 우리가 받은 idx와 같다면...listStyle은 block\n                                return <Li idx={idx} row={row} key={idx} \n                                updateLike={this.updateLike} \n                                updateUnlike={this.updateUnlike} \n                                member_num={this.props.member_num}\n                                insertReply={this.insertReply}\n                                closeAllReplyList = {this.closeAllReplyList}\n                                listStyle= {this.state.showListStyle}\n                                moveToReplyListStart = {this.moveToReplyListStart}\n                                windowScroll = {this.windowScroll}\n                                scrollToLastReply = {this.scrollToLastReply}\n                                deleteData = {this.deleteData}\n                                deleteReply = {this.deleteReply}\n                                // showText = {this.state.hideText}\n                                list={this.list}></Li>\n                            }else{ //만약 idx가 우리가 받은 idx와 다르다면...listStyle은 none\n                                return <Li idx={idx} row={row} key={idx} \n                                updateLike={this.updateLike} \n                                updateUnlike={this.updateUnlike} \n                                member_num={this.props.member_num}\n                                insertReply={this.insertReply}\n                                closeAllReplyList = {this.closeAllReplyList}\n                                listStyle= {this.state.listStyle}\n                                moveToReplyListStart = {this.moveToReplyListStart}\n                                windowScroll = {this.windowScroll}\n                                scrollToLastReply = {this.scrollToLastReply}\n                                deleteData = {this.deleteData}\n                                deleteReply = {this.deleteReply}\n                                // showText = {this.state.showText}\n                                list={this.list}></Li>\n                            }\n\n                          \n                        }\n\n                        )\n                    }\n                </ul>\n                <div id=\"test\"></div>\n            </div>\n        )\n    }\n\n}\n\n","import React from 'react';\nimport './App.css';\nimport './myStyle.css';\nimport Main from './components/main'\nimport {Route} from 'react-router-dom'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path=\"/#/:member_num\" component={Main}/>\n\n      {/* <Main></Main> */}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux'\n\n\n \nconst Root = ({store}) => {\n\n    \n return (\n    // <BrowserRouter>\n    // <App/>\n    // </BrowserRouter>\n\n\n    <Provider store={store} basename={process.env.PUBLIC_URL}> \n        <HashRouter> \n            <App/> \n        </HashRouter> \n    </Provider>\n\n\n );\n};\n\nexport default Root;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Root from './root';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}